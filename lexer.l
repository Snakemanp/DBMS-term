%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "y.tab.h"  /* Generated by yacc/bison */

void count();
%}

%option yylineno

%%
[ \t\n\r]+      { /* Ignore whitespace */ }

"SELECT"    { count(); return SELECT; }
"ALL"       { count(); return ALL; }
"DISTINCT"  { count(); return DISTINCT; }
"FROM"      { count(); return FROM; }
"WHERE"     { count(); return WHERE; }
"GROUP"     { count(); return GROUP; }
"BY"        { count(); return BY; }
"HAVING"    { count(); return HAVING; }
"ORDER"     { count(); return ORDER; }
"ASC"       { count(); return ASC; }
"DESC"      { count(); return DESC; }
"USING"     { count(); return USING; }
"NULLS"     { count(); return NULLS; }
"FIRST"     { count(); return FIRST; }
"LAST"      { count(); return LAST; }
"UNION"     { count(); return UNION; }
"INTERSECT" { count(); return INTERSECT; }
"EXCEPT"    { count(); return EXCEPT; }
"INSERT"    { count(); return INSERT; }
"INTO"      { count(); return INTO; }
"VALUES"    { count(); return VALUES; }
"DEFAULT"   { count(); return DEFAULT; }
"WITH"      { count(); return WITH; }
"RECURSIVE" { count(); return RECURSIVE; }
"AS"        { count(); return AS; }
"UPDATE"    { count(); return UPDATE; }
"ONLY"      { count(); return ONLY; }
"SET"       { count(); return SET; }
"ROW"       { count(); return ROW; }
"JOIN"      { count(); return JOIN; }
"ON"        { count(); return ON; }
"IS"        { count(); return IS; }
"NOT"       { count(); return NOT; }
"NULL"      { count(); return NULL_VAL; } /* Changed from NULL to NULL_VAL */
"DELETE"    { count(); return DELETE; }
"EXISTS"    { count(); return EXISTS; }
"BETWEEN"   { count(); return BETWEEN; }
"AND"       { count(); return AND; }
"OR"        { count(); return OR; }
"IN"        { count(); return IN; }
"INNER"     { count(); return INNER; }
"LEFT"      { count(); return LEFT; }
"RIGHT"     { count(); return RIGHT; }
"FULL"      { count(); return FULL; }
"CROSS"     { count(); return CROSS; }

[a-zA-Z_][a-zA-Z0-9_]* { 
    count(); 
    yylval.str = strdup(yytext);
    return ID; 
}

[0-9]+(\.[0-9]+)? { 
    count(); 
    yylval.num = atoi(yytext);
    return NUM; 
}

"="         { count(); return EQ; }
"<>"        { count(); return NE; }
"<"         { count(); return LT; }
">"         { count(); return GT; }
"<="        { count(); return LE; }
">="        { count(); return GE; }
"||"        { count(); return CONCAT; }
"+"         { count(); return PLUS; }
"-"         { count(); return MINUS; }
"*"         { count(); return ASTERISK; }
"/"         { count(); return DIV; }
","         { count(); return COMMA; }
"."         { count(); return DOT; }
";"         { count(); return SEMICOLON; }
"("         { count(); return LPAREN; }
")"         { count(); return RPAREN; }

'[^']*'     { 
    count(); 
    yylval.str = strdup(yytext);
    return STRING_LITERAL; 
}

.           { printf("Unexpected character: %s\n", yytext); }

%%

void count() {
    /* This function could be used to track column numbers for error reporting */
    /* For now, it's just a placeholder for the token recognition action */
}

int yywrap() {
    return 1;
}